namespace idkit {
    void init();
};

/// Credential types that can be requested
enum Credential {
    "Orb",
    "Face",
    "SecureDocument",
    "Document",
    "Device",
};

/// Legacy verification levels for backward compatibility
enum VerificationLevel {
    "Orb",
    "Device",
    "Document",
    "SecureDocument",
};

/// Status of a verification request
[Enum]
interface Status {
    WaitingForConnection();
    AwaitingConfirmation();
    Confirmed(Proof proof);
    Failed(string error);
};

/// World ID proof
dictionary Proof {
    string proof;
    string merkle_root;
    string nullifier_hash;
    Credential verification_level;
};

/// Application ID
[External="idkit_core"]
typedef extern AppId;

/// Constraints on credential selection
[External="idkit_core"]
typedef extern Constraints;

/// Credential request
[External="idkit_core"]
typedef extern Request;

/// Session configuration
[External="idkit_core"]
typedef extern SessionConfig;

/// World ID verification session
[External="idkit_core"]
typedef extern Session;

/// Creates a new AppId
[Throws=string]
AppId create_app_id(string app_id);

/// Creates a new credential request
Request create_request(
    Credential credential_type,
    string signal,
    boolean? face_auth
);

/// Creates an "any" constraint (OR logic)
Constraints create_any_constraint(sequence<Credential> credentials);

/// Creates an "all" constraint (AND logic)
Constraints create_all_constraint(sequence<Credential> credentials);

/// Creates a session config from verification level (legacy)
SessionConfig create_session_config_from_verification_level(
    AppId app_id,
    string action,
    VerificationLevel verification_level,
    string signal
);

/// Creates a new session config
SessionConfig create_session_config(AppId app_id, string action);

/// Adds a request to a session config
SessionConfig session_config_add_request(SessionConfig config, Request request);

/// Sets constraints on a session config
SessionConfig session_config_set_constraints(SessionConfig config, Constraints constraints);

/// Creates a session
[Throws=string]
Session create_session(SessionConfig config);

/// Gets the connect URL for a session
string session_connect_url(Session session);

/// Polls a session for status
[Throws=string]
Status session_poll(Session session);

/// Waits for a proof from a session
[Throws=string]
Proof session_wait_for_proof(Session session);

/// Verifies a proof using the Developer Portal API
[Throws=string]
void verify_proof(Proof proof, AppId app_id, string action, string signal);
